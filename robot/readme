技术准备：JAVA环境、网站爬虫、微信网页版登录、图灵api接口。
githu地址：https://github.com/HuoShengLiangIT/robot JAVA代码


首先，微信没有给我们提供任何接口去开发微信机器人。那么我们唯一的方法就是用WEB微信，模拟浏览器请求，获取聊天记录的response，然后使用图灵API接口智能回复。只能回复可以用网上一些智能回复插件。图灵接口的开发不难，因为别人提供好了接口给你用。但是微信就不一样了。我们先分析WEB微信的登录—聊天的过程。

一、微信服务器返回一个会话ID
微信Web版本不使用用户名和密码登录，而是采用二维码登录，所以服务器需要首先分配一个唯一的会话ID，用来标识当前的一次登录，通过请求地址：

https://login.weixin.qq.com/jslogin?appid=wx782c26e4c19acffb&redirect_uri=https%3A%2F%2Fwx.qq.com%2Fcgi-bin%2Fmmwebwx-bin%2Fwebwxnewloginpage&fun=new&lang=zh_CN&_=1377482012272（其中1377482012272这个值是当前距离林威治标准时间的毫秒）

服务器会返回如下的字符串：

window.QRLogin.code = 200; window.QRLogin.uuid = “DeA6idundY9VKn”;
而这个DeA6idundY9VKn字符串就是 微信服务器返回给我们的ID 。

  /**
   * 获取UUID
   * @return
   */
  public String getUUID() {
    String url = "https://login.weixin.qq.com/jslogin";
    HttpRequest request = HttpRequest.get(url, true, 
        "appid", "wx782c26e4c19acffb", 
        "fun", "new",
        "lang", "zh_CN",
        "_" , DateKit.getCurrentUnixTime());
    
    LOGGER.info("[*] " + request);
    
    String res = request.body();
    request.disconnect();
​
    if(StringKit.isNotBlank(res)){
      String code = Matchers.match("window.QRLogin.code = (\\d+);", res);
      if(null != code){
        if(code.equals("200")){
          this.uuid = Matchers.match("window.QRLogin.uuid = \"(.*)\";", res);
          return this.uuid;
        } else {
          LOGGER.info("[*] 错误的状态码: %s", code);
        }
      }
    }
    return null;
  }
​
二、通过会话ID获得二维码
既然微信Web版本是通过二维码进行登录，如何获得这个随机的二维码呢？答案就是利用刚才获得的ID去请求服务器生成的二维码，通过上面的ID我们组合得到以下的URL地址：

https://login.weixin.qq.com/qrcode/DeA6idundY9VKn?t=webwx

该请求返回的便是我们需要的二维码，此时需要用户在微信的手机版本中扫描这个二维码（我就搞不明白微信官方是如何想的，登录Web版本竟然还需要手机微信去配合登录，难道没有考虑我被迫选择Web微信就是因为手机不在身边这样的情形么？）

  /**
   * 显示二维码
   * @return
   */
  public void showQrCode() {
    
    String url = "https://login.weixin.qq.com/qrcode/" + this.uuid;
    
    final File output = new File("temp.jpg");
    
    HttpRequest.post(url, true, 
        "t", "webwx", 
        "_" , DateKit.getCurrentUnixTime())
        .receive(output);
​
    if(null != output && output.exists() && output.isFile()){
      EventQueue.invokeLater(new Runnable() {
        public void run() {
          try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            qrCodeFrame = new QRCodeFrame(output.getPath());
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      });
    }
  }
​


三、轮询手机端是否已经扫描二维码并确认在Web端登录
当获得二维码之后，就需要用户去手机端去扫描二维码，并获得用户的授权，此时我们并不知道用户何时完成这个操作，所以我们只有轮询，而轮询的地址就是：

https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?uuid=DeA6idundY9VKn&tip=1&_=1377482045264（注意UUID和最后时间这两个参数）

如果服务器返回：

window.code=201;
则说明此时用户在手机端已经完成扫描，但还没有点击确认；

如果服务器返回：

window.redirect_uri=一个URL地址
则说明此时用户已经在手机端完成了授权过程，保存下这个URL地址下一步骤中使用。

  /**
   * 等待登录
   */
  public String waitForLogin(){
    this.tip = 1;
    String url = "https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login";
    HttpRequest request = HttpRequest.get(url, true, 
        "tip", this.tip, 
        "uuid", this.uuid,
        "_" , DateKit.getCurrentUnixTime());
    
    LOGGER.info("[*] " + request.toString());
    
    String res = request.body();
    request.disconnect();
​
    if(null == res){
      LOGGER.info("[*] 扫描二维码验证失败");
      return "";
    }
    
    String code = Matchers.match("window.code=(\\d+);", res);
    if(null == code){
      LOGGER.info("[*] 扫描二维码验证失败");
      return "";
    } else {
      if(code.equals("201")){
        LOGGER.info("[*] 成功扫描,请在手机上点击确认以登录");
        tip = 0;
      } else if(code.equals("200")){
        LOGGER.info("[*] 正在登录...");
        String pm = Matchers.match("window.redirect_uri=\"(\\S+?)\";", res);
​
        String redirectHost = "wx.qq.com";
        try {
          URL pmURL = new URL(pm);
          redirectHost = pmURL.getHost();
        } catch (MalformedURLException e) {
          e.printStackTrace();
        }
        String pushServer = JSUtil.getPushServer(redirectHost);
        webpush_url = "https://" + pushServer + "/cgi-bin/mmwebwx-bin";
​
        this.redirect_uri = pm + "&fun=new";
        LOGGER.info("[*] redirect_uri=%s", this.redirect_uri);
        this.base_uri = this.redirect_uri.substring(0, this.redirect_uri.lastIndexOf("/"));
        LOGGER.info("[*] base_uri=%s", this.base_uri);
      } else if(code.equals("408")){
        LOGGER.info("[*] 登录超时");
      } else {
        LOGGER.info("[*] 扫描code=%s", code);
      }
    }
    return code;
  }
  private void closeQrWindow() {
    qrCodeFrame.dispose();
  }
四、访问登录地址，获得uin和sid
通过访问上一步骤中获得的URL地址，可以在服务器返回的Cookies中获得到wxuin和wxsid这两个值，这两值在后续的通信过程中都要使用到这两个值，并且Cookies中也需要包括这两项。

  /**
   * 登录
   */
  public boolean login(){
    
    HttpRequest request = HttpRequest.get(this.redirect_uri);
    
    LOGGER.info("[*] " + request);
    
    String res = request.body();
    this.cookie = CookieUtil.getCookie(request);
​
    request.disconnect();
    
    if(StringKit.isBlank(res)){
      return false;
    }
    
    this.skey = Matchers.match("<skey>(\\S+)</skey>", res);
    this.wxsid = Matchers.match("<wxsid>(\\S+)</wxsid>", res);
    this.wxuin = Matchers.match("<wxuin>(\\S+)</wxuin>", res);
    this.pass_ticket = Matchers.match("<pass_ticket>(\\S+)</pass_ticket>", res);
    
    LOGGER.info("[*] skey[%s]", this.skey);
    LOGGER.info("[*] wxsid[%s]", this.wxsid);
    LOGGER.info("[*] wxuin[%s]", this.wxuin);
    LOGGER.info("[*] pass_ticket[%s]", this.pass_ticket);
    
    this.BaseRequest = new JSONObject();
    BaseRequest.put("Uin", this.wxuin);
    BaseRequest.put("Sid", this.wxsid);
    BaseRequest.put("Skey", this.skey);
    BaseRequest.put("DeviceID", this.deviceId);
    
    return true;
  }
​


五、初使化微信信息
前面的步骤算是完成了这个复杂的登录过程，如果我们需要使用微信就需要获得当前用户的信息、好友列表等，还有一个关键的就是同步信息（后续与服务器轮询中需要使用同步信息），通过访问以下的链接：

https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxinit?r=1377482058764（r依然是时间）

访问该链接需要使用POST，并且在Body中带上以下的JSON信息：

{"BaseRequest":{"Uin":"2545437902","Sid":"QfLp+Z+FePzvOFoG","Skey":"","DeviceID":"e1615250492"}}
这个JSON串中Uin和Sid分别是上面步骤中获得的那两个Cookie值，DeviceID是一个本地生成的随机字符串（分析了官方的总是e+一串数字，所以我们也保持这样的格式）。

服务器就会返回一个很长的JSON串，这其中包括：BaseResponse中的值用来表示请求状态码，ContactList主要用来表示联系人（此列表不全，只包括了类似通讯录助手、文件助手、微信团队和一些公众帐号等，后面会通过另一接口去获得更全面的信息），SyncKey是用户与服务器同步的信息，User就是当前登录用户自己的信息。

  /**
   * 微信初始化
   */
  public boolean wxInit(){
    
    String url = this.base_uri + "/webwxinit?r=" + DateKit.getCurrentUnixTime() + "&pass_ticket=" + this.pass_ticket +
        "&skey=" + this.skey;
    
    JSONObject body = new JSONObject();
    body.put("BaseRequest", this.BaseRequest);
    
    HttpRequest request = HttpRequest.post(url)
        .header("Content-Type", "application/json;charset=utf-8")
        .header("Cookie", this.cookie)
        .send(body.toString());
    
    LOGGER.info("[*] " + request);
    String res = request.body();
    request.disconnect();
    
    if(StringKit.isBlank(res)){
      return false;
    }
    
    try {
      JSONObject jsonObject = JSON.parse(res).asObject();
      if(null != jsonObject){
        JSONObject BaseResponse = jsonObject.getJSONObject("BaseResponse");
        if(null != BaseResponse){
          int ret = BaseResponse.getInt("Ret", -1);
          if(ret == 0){
            this.SyncKey = jsonObject.getJSONObject("SyncKey");
            this.User = jsonObject.getJSONObject("User");
            
            StringBuffer synckey = new StringBuffer();
            
            JSONArray list = SyncKey.getJSONArray("List");
            for(int i=0, len=list.size(); i<len; i++){
              JSONObject item = list.getJSONObject(i);
              synckey.append("|" + item.getInt("Key", 0) + "_" + item.getInt("Val", 0));
            }
            
            this.synckey = synckey.substring(1);
            
            return true;
          }
        }
      }
    } catch (Exception e) {
    }
    return false;
  }
​
  /**
   * 微信状态通知
   */
  public boolean wxStatusNotify (){
    
    String url = this.base_uri + "/webwxstatusnotify?lang=zh_CN&pass_ticket=" + this.pass_ticket;
    
    JSONObject body = new JSONObject();
    body.put("BaseRequest", BaseRequest);
    body.put("Code", 3);
    body.put("FromUserName", this.User.getString("UserName"));
    body.put("ToUserName", this.User.getString("UserName"));
    body.put("ClientMsgId", DateKit.getCurrentUnixTime());
    
    HttpRequest request = HttpRequest.post(url)
        .header("Content-Type", "application/json;charset=utf-8")
        .header("Cookie", this.cookie)
        .send(body.toString());
    
    LOGGER.info("[*] " + request);
    String res = request.body();
    request.disconnect();
​
    if(StringKit.isBlank(res)){
      return false;
    }
    
    try {
      JSONObject jsonObject = JSON.parse(res).asObject();
      JSONObject BaseResponse = jsonObject.getJSONObject("BaseResponse");
      if(null != BaseResponse){
        int ret = BaseResponse.getInt("Ret", -1);
        return ret == 0;
      }
    } catch (Exception e) {
    }
    return false;
  }
​


六、获得所有的好友列表
在上一步骤中已经获得了部分好友和公众帐号，如果需要获得完整的好友信息，就需要访问以下的链接：

https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetcontact?r=1377482079876（r依然是时间）

访问该链接同样需要POST方式，但Body为空JSON：{}，服务器对身份的判定是通过Cookies，所以需要保持之前访问的Cookies不被修改（在Objective-C中会自动保存相关的Cookies，无需程序特殊处理），在返回的JSON串中，MemberList中就包含了所有的好友信息。

  /**
   * 获取联系人
   */
  public boolean getContact(){
    
    String url = this.base_uri + "/webwxgetcontact?pass_ticket=" + this.pass_ticket + "&skey=" + this.skey + "&r=" + DateKit.getCurrentUnixTime();
    
    JSONObject body = new JSONObject();
    body.put("BaseRequest", BaseRequest);
    
    HttpRequest request = HttpRequest.post(url)
        .header("Content-Type", "application/json;charset=utf-8")
        .header("Cookie", this.cookie)
        .send(body.toString());
    
    LOGGER.info("[*] " + request);
    String res = request.body();
    request.disconnect();
​
    if(StringKit.isBlank(res)){
      return false;
    }
    
    try {
      JSONObject jsonObject = JSON.parse(res).asObject();
      JSONObject BaseResponse = jsonObject.getJSONObject("BaseResponse");
      if(null != BaseResponse){
        int ret = BaseResponse.getInt("Ret", -1);
        if(ret == 0){
          this.MemberList = jsonObject.getJSONArray("MemberList");
          this.ContactList = new JSONArray();
          if(null != MemberList){
            for(int i=0, len=MemberList.size(); i<len; i++){
              JSONObject contact = this.MemberList.getJSONObject(i);
              //公众号/服务号
              if(contact.getInt("VerifyFlag", 0) == 8){
                continue;
              }
              //特殊联系人
              if(SpecialUsers.contains(contact.getString("UserName"))){
                continue;
              }
              //群聊
              if(contact.getString("UserName").indexOf("@@") != -1){
                continue;
              }
              //自己
              if(contact.getString("UserName").equals(this.User.getString("UserName"))){
                continue;
              }
              ContactList.add(contact);
            }
            return true;
          }
        }
      }
    } catch (Exception e) {
    }
    return false;
  }
​


七、保持与服务器的信息同步
与服务器保持同步需要在客户端做轮询，该轮询的URL如下：

https://webpush.weixin.qq.com/cgi-bin/mmwebwx-bin/synccheck?callback=jQuery18309326978388708085_1377482079946&r=1377482079876&sid=QfLp+Z+FePzvOFoG&uin=2545437902&deviceid=e1615250492&synckey=(见以下说明)&_=1377482079876

其中的参数r和_都是time，sid，uin，deviceid与上面步骤的值相对应，此处的synkey是上步步骤获得的同步键值，但需要按一定的规则组合成以下的字符串：

1_124125|2_452346345|3_65476547|1000_5643635

就是将键和值用_隔开，不同的键值对用|隔开，但记得|需要URL编码成%7C，通过访问上面的地址，会返回如下的字符串：

window.synccheck={retcode:”0”,selector:”0”}
如果retcode中的值不为0，则说明与服务器的通信有问题了，但具体问题我就无法预测了，selector中的值表示客户端需要作出的处理，目前已经知道当为6的时候表示有消息来了，就需要去访问另一个接口获得新的消息。



  /**
   * 消息检查
   */
  public int[] syncCheck(){
    
    int[] arr = new int[2];
    
    String url = this.webpush_url + "/synccheck";
    
    JSONObject body = new JSONObject();
    body.put("BaseRequest", BaseRequest);
    
    HttpRequest request = HttpRequest.get(url, true,
        "r", DateKit.getCurrentUnixTime() + StringKit.getRandomNumber(5),
        "skey", this.skey,
        "uin", this.wxuin,
        "sid", this.wxsid,
        "deviceid", this.deviceId,
        "synckey", this.synckey,
        "_", System.currentTimeMillis())
        .header("Cookie", this.cookie);
    
    LOGGER.info("[*] " + request);
    String res = request.body();
    request.disconnect();
​
    if(StringKit.isBlank(res)){
      return arr;
    }
    
    String retcode = Matchers.match("retcode:\"(\\d+)\",", res);
    String selector = Matchers.match("selector:\"(\\d+)\"}", res);
    if(null != retcode && null != selector){
      arr[0] = Integer.parseInt(retcode);
      arr[1] = Integer.parseInt(selector);
      return arr;
    }
    return arr;
  }
  
  private void webwxsendmsg(String content, String to) {
    
    String url = this.base_uri + "/webwxsendmsg?lang=zh_CN&pass_ticket=" + this.pass_ticket;
    
    JSONObject body = new JSONObject();
    
    String clientMsgId = DateKit.getCurrentUnixTime() + StringKit.getRandomNumber(5);
    JSONObject Msg = new JSONObject();
    Msg.put("Type", 1);
    Msg.put("Content", content);
    Msg.put("FromUserName", User.getString("UserName"));
    Msg.put("ToUserName", to);
    Msg.put("LocalID", clientMsgId);
    Msg.put("ClientMsgId", clientMsgId);
    
    body.put("BaseRequest", this.BaseRequest);
    body.put("Msg", Msg);
    
    HttpRequest request = HttpRequest.post(url)
        .header("Content-Type", "application/json;charset=utf-8")
        .header("Cookie", this.cookie)
        .send(body.toString());
    
    LOGGER.info("[*] " + request);
    request.body();
    request.disconnect();
  }
​
八、获得别人发来的消息
当一个步骤中知道有新消息时，就需要去获取消息内容，通过访问以下的链接：

https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxsync?sid=QfLp+Z+FePzvOFoG&r=1377482079876

上面链接中的参数sid对应上面步骤中的值，r为时间，访问链接需要使用POST方式，Body中包括JSON串，该JSON串格式如下：

{"BaseRequest" : {"Uin":2545437902,"Sid":"QfLp+Z+FePzvOFoG"},"SyncKey" : {"Count":4,"List":[{"Key":1,"Val":620310295},{"Key":2,"Val":620310303},{"Key":3,"Val":620310285},{"Key":1000,"Val":1377479086}]},"rr" :1377482079876};
以下的信息中BaseRequest中包括的Uin与Sid与上面步骤中的值对应，SyncKey也是上面步骤中获得的同步键值对，rr为时间，访问成功之后服务器会返回一个JSON串，其中AddMsgList中是一个数组，包含了所有新消息。

  /**
   * 获取最新消息
   */
  public JSONObject webwxsync(){
    
    String url = this.base_uri + "/webwxsync?lang=zh_CN&pass_ticket=" + this.pass_ticket
         + "&skey=" + this.skey + "&sid=" + this.wxsid + "&r=" + DateKit.getCurrentUnixTime();
    
    JSONObject body = new JSONObject();
    body.put("BaseRequest", BaseRequest);
    body.put("SyncKey", this.SyncKey);
    body.put("rr", DateKit.getCurrentUnixTime());
    
    HttpRequest request = HttpRequest.post(url)
        .header("Content-Type", "application/json;charset=utf-8")
        .header("Cookie", this.cookie)
        .send(body.toString());
    
    LOGGER.info("[*] " + request);
    String res = request.body();
    request.disconnect();
    
    if(StringKit.isBlank(res)){
      return null;
    }
    
    JSONObject jsonObject = JSON.parse(res).asObject();
    JSONObject BaseResponse = jsonObject.getJSONObject("BaseResponse");
    if(null != BaseResponse){
      int ret = BaseResponse.getInt("Ret", -1);
      if(ret == 0){
        this.SyncKey = jsonObject.getJSONObject("SyncKey");
        
        StringBuffer synckey = new StringBuffer();
        JSONArray list = SyncKey.getJSONArray("List");
        for(int i=0, len=list.size(); i<len; i++){
          JSONObject item = list.getJSONObject(i);
          synckey.append("|" + item.getInt("Key", 0) + "_" + item.getInt("Val", 0));
        }
        this.synckey = synckey.substring(1);
      }
    }
    return jsonObject;
  }
  
  /**
   * 获取最新消息
   */
  public void handleMsg(JSONObject data){
    if(null == data){
      return;
    }
    
    JSONArray AddMsgList = data.getJSONArray("AddMsgList");
    
    for(int i=0,len=AddMsgList.size(); i<len; i++){
      LOGGER.info("[*] 你有新的消息，请注意查收");
      JSONObject msg = AddMsgList.getJSONObject(i);
      int msgType = msg.getInt("MsgType", 0);
      String name = getUserRemarkName(msg.getString("FromUserName"));
      String content = msg.getString("Content");
      
      if(msgType == 51){
        LOGGER.info("[*] 成功截获微信初始化消息");
      } else if(msgType == 1){
        if(SpecialUsers.contains(msg.getString("ToUserName"))){
          continue;
        } else if(msg.getString("FromUserName").equals(User.getString("UserName"))){
          continue;
        } else if (msg.getString("ToUserName").indexOf("@@") != -1) {
          String[] peopleContent = content.split(":<br/>");
          LOGGER.info("|" + name + "| " + peopleContent[0] + ":\n" + peopleContent[1].replace("<br/>", "\n"));
        } else {
          LOGGER.info(name + ": " + content);
          String ans = xiaodoubi(content);
          webwxsendmsg(ans, msg.getString("FromUserName"));
          LOGGER.info("自动回复 " + ans);
        }
      } else if(msgType == 3){
        webwxsendmsg("二蛋还不支持图片呢", msg.getString("FromUserName"));
      } else if(msgType == 34){
        webwxsendmsg("二蛋还不支持语音呢", msg.getString("FromUserName"));
      } else if(msgType == 42){
        LOGGER.info(name + " 给你发送了一张名片:");
        LOGGER.info("=========================");
      }
    }
  }
​


九、向用户发送消息
用户主动发送消息，通过以下的URL地址：https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxsendmsg?sid=QfLp+Z+FePzvOFoG&r=1377482079876上面的sid和r参数不再解释了，访问该URL采用POST方式，在Body中的JSON串形如以下的格式：

{"BaseRequest":{"DeviceID" : "e441551176","Sid" : "S8wNi91Zry3024eg","Skey" : "F820928BBA5D8ECA23448F076D2E8A915E1349E9FB4F4332","Uin" : "2545437902"},"Msg" : {"ClientMsgId" : 1377504862158,"Content" : "hello","FromUserName" : "wxid_2rrz8g8ezuox22","LocalID" : 1377504862158,"ToUserName" : "wxid_j4nu420ojhsr21","Type" : 1},"rr" = 1377504864463}
其中BaseRequest都是授权相关的值，与上面的步骤中的值对应，Msg是对消息的描述，包括了发送人与接收人，消息内容，消息的类型(1为文本)，ClientMsgId和LocalID由本地生成。rr可用当前的时间。在返回JSON结果中BaseResponse描述了发送情况，Ret为0表示发送成功。

  private final String ITPK_API = "http://i.itpk.cn/api.php";
  private final String API_KEY="你的API_KEY";
  private final String API_SECRET="你的API_SECRET";
  
  // 这里的api_key和api_secret可以自己申请一个
  private final String KEY = "?api_key="+API_KEY+"&api_secret="+API_SECRET;
  
  private String xiaodoubi(String msg) {
    String url = ITPK_API + KEY + "&question=" + msg;
    String result = HttpRequest.get(url).body();
    return result;
  }
​
  private String getUserRemarkName(String id) {
    String name = "这个人物名字未知";
    for(int i=0, len=MemberList.size(); i<len; i++){
      JSONObject member = this.MemberList.getJSONObject(i);
      if(member.getString("UserName").equals(id)){
        if(StringKit.isNotBlank(member.getString("RemarkName"))){
          name = member.getString("RemarkName");
        } else {
          name = member.getString("NickName");
        }
        return name;
      }
    }
    return name;
  }
  
  public void listenMsgMode(){
    new Thread(new Runnable() {
      public void run() {
        LOGGER.info("[*] 进入消息监听模式 ...");
        int playWeChat = 0;
        while(true){
          
          int[] arr = syncCheck();
          
          LOGGER.info("[*] retcode=%s,selector=%s", arr[0], arr[1]);
          
          if(arr[0] == 1100){
//            LOGGER.info("[*] 你在手机上登出了微信，债见");
//            break;
            arr = syncCheck();
          }
          
          if(arr[0] == 0){
            if(arr[1] == 2){
              JSONObject data = webwxsync();
              handleMsg(data);
            } else if(arr[1] == 6){
              JSONObject data = webwxsync();
              handleMsg(data);
            } else if(arr[1] == 7){
              playWeChat += 1;
              LOGGER.info("[*] 你在手机上玩微信被我发现了 %d 次", playWeChat);
              webwxsync();
            } else if(arr[1] == 3){
            } else if(arr[1] == 0){
              try {
                Thread.sleep(100);
              } catch (InterruptedException e) {
                e.printStackTrace();
              }
            }
          } else {
            try {
              Thread.sleep(1000);
            } catch (InterruptedException e) {
              e.printStackTrace();
            }
          }
        }
      }
    }, "listenMsgMode").start();
  }
  
  public static void main(String[] args) throws InterruptedException {
​
    System.out.println(JSUtil.getPushServer("wx.qq.com"));
​
    App app = new App();
    String uuid = app.getUUID();
    if(null == uuid){
      LOGGER.info("[*] uuid获取失败");
    } else {
      LOGGER.info("[*] 获取到uuid为 [%s]", app.uuid);
      app.showQrCode();
      while(!app.waitForLogin().equals("200")){
        Thread.sleep(2000);
      }
      app.closeQrWindow();
      
      if(!app.login()){
        LOGGER.info("微信登录失败");
        return;
      }
      
      LOGGER.info("[*] 微信登录成功");
      
      if(!app.wxInit()){
        LOGGER.info("[*] 微信初始化失败");
        return;
      }
      
      LOGGER.info("[*] 微信初始化成功");
      
      if(!app.wxStatusNotify()){
        LOGGER.info("[*] 开启状态通知失败");
        return;
      }
      
      LOGGER.info("[*] 开启状态通知成功");
      
      if(!app.getContact()){
        LOGGER.info("[*] 获取联系人失败");
        return;
      }
      
      LOGGER.info("[*] 获取联系人成功");
      LOGGER.info("[*] 共有 %d 位联系人", app.ContactList.size());
      
      // 监听消息
      app.listenMsgMode();
      
      //mvn exec:java -Dexec.mainClass="me.biezhi.weixin.App"
    }
  }
​




